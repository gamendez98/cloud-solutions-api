// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package models

import (
	"context"
)

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, created_at, username, email, password_hash, image_path FROM accounts WHERE username = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ImagePath,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, created_at, username, email, password_hash, image_path FROM accounts WHERE username = $1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ImagePath,
	)
	return i, err
}

const getAccountPasswordByID = `-- name: GetAccountPasswordByID :one
SELECT id, password_hash FROM accounts WHERE username = $1
`

type GetAccountPasswordByIDRow struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"passwordHash"`
}

func (q *Queries) GetAccountPasswordByID(ctx context.Context, username string) (GetAccountPasswordByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountPasswordByID, username)
	var i GetAccountPasswordByIDRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE accounts SET password_hash = $1 WHERE id = $2
`

type UpdateAccountPasswordParams struct {
	PasswordHash string `json:"passwordHash"`
	ID           int32  `json:"id"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPassword, arg.PasswordHash, arg.ID)
	return err
}
