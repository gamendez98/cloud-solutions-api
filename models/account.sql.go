// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package models

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (username, password_hash, email)
VALUES ($1, $2, $3)
RETURNING id, created_at, username, email, password_hash
`

type CreateAccountParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"passwordHash"`
	Email        string `json:"email"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Username, arg.PasswordHash, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, created_at, username, email, password_hash
FROM accounts
WHERE username = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, created_at, username, email, password_hash
FROM accounts
WHERE username = $1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getAccountPasswordHashByUsername = `-- name: GetAccountPasswordHashByUsername :one
SELECT id, password_hash
FROM accounts
WHERE username = $1
`

type GetAccountPasswordHashByUsernameRow struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"passwordHash"`
}

func (q *Queries) GetAccountPasswordHashByUsername(ctx context.Context, username string) (GetAccountPasswordHashByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountPasswordHashByUsername, username)
	var i GetAccountPasswordHashByUsernameRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE accounts
SET password_hash = $1
WHERE id = $2
`

type UpdateAccountPasswordParams struct {
	PasswordHash string `json:"passwordHash"`
	ID           int32  `json:"id"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPassword, arg.PasswordHash, arg.ID)
	return err
}
